| **Test Script**                    | **Steps**                                                                                                                                                 | **Expected Results**                                                                                                                | **Automated Test Script|
|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------||
| **User Login Functionality**       | 1. Open the login page.<br>2. Enter valid username and password.<br>3. Click the "Login" button.<br>4. Verify redirection to the dashboard.<br>5. Log out.<br>6. Enter invalid username and password.<br>7. Click the "Login" button.<br>8. Verify an error message is displayed. | - Users with valid credentials are redirected to the dashboard.<br>- Users with invalid credentials receive an appropriate error message. | ```python<br>import os<br>import pytest<br>from selenium import webdriver<br>from selenium.webdriver.common.by import By<br>from selenium.webdriver.support.ui import WebDriverWait<br>from selenium.webdriver.support import expected_conditions as EC<br>from selenium.webdriver.common.keys import Keys<br><br>@pytest.fixture<br>def driver():<br>    driver = webdriver.Chrome()  # Ensure ChromeDriver is installed and in your PATH<br>    yield driver<br>    driver.quit()<br><br>def test_gmail_login(driver):<br>    # Gmail credentials<br>    gmail_email = os.getenv("GMAIL_EMAIL")  # Set your email in environment variables<br>    gmail_password = os.getenv("GMAIL_PASSWORD")  # Set your password in environment variables<br><br>    # Navigate to Gmail<br>    driver.get("https://mail.google.com/")<br><br>    # Enter email<br>    email_input = WebDriverWait(driver, 10).until(<br>        EC.presence_of_element_located((By.ID, "identifierId"))<br>    )<br>    email_input.send_keys(gmail_email)<br>    email_input.send_keys(Keys.RETURN)<br><br>    # Enter password<br>    password_input = WebDriverWait(driver, 10).until(<br>        EC.presence_of_element_located((By.NAME, "password"))<br>    )<br>    password_input.send_keys(gmail_password)<br>    password_input.send_keys(Keys.RETURN)<br><br>    # Verify login by checking for inbox element<br>    inbox_loaded = WebDriverWait(driver, 20).until(<br>        EC.presence_of_element_located((By.CSS_SELECTOR, "div[aria-label='Primary']"))<br>    )<br>    assert inbox_loaded is not None, "Login failed or inbox did not load"<br><br>if __name__ == "__main__":<br>    pytest.main([__file__])<br>``` |
| **User Registration Functionality** | 1. Open the registration page.<br>2. Enter valid user details (username, password, email).<br>3. Click the "Register" button.<br>4. Verify a confirmation email is received.<br>5. Verify the user can log in with new credentials.<br>6. Enter invalid details.<br>7. Click "Register".<br>8. Verify error messages are displayed. | - New users register successfully with valid details.<br>- Appropriate error messages for invalid inputs.                       | ```python<br>def test_user_registration():<br>    try:<br>        # Open the registration page<br>        driver.get("http://your-web-application-url/register")<br><br>        # Enter valid user details<br>        driver.find_element(By.ID, "username").send_keys("new_user")<br>        driver.find_element(By.ID, "email").send_keys("new_user@example.com")<br>        driver.find_element(By.ID, "password").send_keys("new_password")<br><br>        # Click the "Register" button<br>        driver.find_element(By.ID, "registerButton").click()<br><br>        # Wait for registration to complete<br>        time.sleep(3)<br><br>        # Verify that a confirmation message is displayed<br>        assert "Registration successful" in driver.page_source<br><br>        # Verify that the user can log in with the new credentials<br>        driver.get("http://your-web-application-url/login")<br>        driver.find_element(By.ID, "username").send_keys("new_user")<br>        driver.find_element(By.ID, "password").send_keys("new_password")<br>        driver.find_element(By.ID, "loginButton").click()<br><br>        time.sleep(3)<br>        assert "Dashboard" in driver.title<br><br>    finally:<br>        # Close the browser<br>        driver.quit()<br><br>test_user_registration()<br>``` |
| **Password Reset Functionality**    | 1. Open the password reset page.<br>2. Enter registered email address.<br>3. Click "Reset Password".<br>4. Verify a password reset email is sent.<br>5. Open the email and click the reset link.<br>6. Enter a new password.<br>7. Verify successful password update and login. | - Users receive a password reset email.<br>- Users can reset their password and log in with the new password.                 | ```python<br>def test_password_reset():<br>    try:<br>        # Open the password reset page<br>        driver.get("http://your-web-application-url/password-reset")<br><br>        # Enter the registered email address<br>        driver.find_element(By.ID, "email").send_keys("registered_user@example.com")<br><br>        # Click the "Reset Password" button<br>        driver.find_element(By.ID, "resetButton").click()<br><br>        # Wait for email to be sent<br>        time.sleep(3)<br><br>        # Assume the user received the email and clicked the reset link<br>        driver.get("http://your-web-application-url/reset-link")<br><br>        # Enter a new password<br>        driver.find_element(By.ID, "newPassword").send_keys("new_password")<br>        driver.find_element(By.ID, "confirmPassword").send_keys("new_password")<br>        driver.find_element(By.ID, "resetPasswordButton").click()<br><br>        # Verify that the password is successfully updated<br>        time.sleep(3)<br>        assert "Password reset successful" in driver.page_source<br><br>        # Verify that the user can log in with the new password<br>        driver.get("http://your-web-application-url/login")<br>        driver.find_element(By.ID, "username").send_keys("registered_user")<br>        driver.find_element(By.ID, "password").send_keys("new_password")<br>        driver.find_element(By.ID, "loginButton").click()<br><br>        time.sleep(3)<br>        assert "Dashboard" in driver.title<br><br>    finally:<br>        # Close the browser<br>        driver.quit()<br><br>test_password_reset()<br>``` |
| **User Profile Update Functionality**  | 1. Log in to the application.<br>2. Navigate to the profile page.<br>3. Update profile information (e.g., name, email).<br>4. Click the "Save" button.<br>5. Verify that the changes are saved and displayed correctly. | - Profile information is updated and displayed correctly.                                                                         | ```python<br>def test_user_profile_update():<br>    try:<br>        # Log in to the application<br>        driver.get("http://your-web-application-url/login")<br>        driver.find_element(By.ID, "username").send_keys("existing_user")<br>        driver.find_element(By.ID, "password").send_keys("existing_password")<br>        driver.find_element(By.ID, "loginButton").click()<br><br>        time.sleep(3)<br><br>        # Navigate to the profile page<br>        driver.get("http://your-web-application-url/profile")<br><br>        # Update profile information<br>        driver.find_element(By.ID, "name").clear()<br>        driver.find_element(By.ID, "name").send_keys("Updated Name")<br>        driver.find_element(By.ID, "email").clear()<br>        driver.find_element(By.ID, "email").send_keys("updated_email@example.com")<br><br>        # Click the "Save" button<br>        driver.find_element(By.ID, "saveButton").click()<br><br>        # Verify that the changes are saved<br>        time.sleep(3)<br>        assert "Profile updated successfully" in driver.page_source<br><br>    finally:<br>        # Close the browser<br>        driver.quit()<br><br>test_user_profile_update()<br>``` |
| **Logout Functionality**               | 1. Log in to the application.<br>2. Click the "Logout" button.<br>3. Verify redirection to the login page.                                               | - Users are successfully logged out and redirected to the login page.                                                               | ```python<br>def test_logout():<br>    try:<br>        # Log in to the application<br>        driver.get("http://your-web-application-url/login")<br>        driver.find_element(By.ID, "username").send_keys

 
